<?php
namespace Tolerable\PayPal;

use \PHPUnit_Framework_TestCase;
use Guzzle\Service\Client;

/**
 * Test class for Tolerable_PayPal_Gateway.
 * Generated by PHPUnit on 2011-12-30 at 20:52:21.
 */
class GatewayTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Gateway
     */
    protected $gateway;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $httpClient = new Client();
        $httpClient->setConfig(array(
            'ssl.certificate_authority' => 'system',
            'curl.options' => array(
                CURLOPT_SSL_VERIFYPEER => false
            )
        ));
        $this->gateway = new Gateway(
                $httpClient, "seller_1298871127_biz_api1.philipbrown.id.au",
                "1298871136", "AyfC9oEHO-Ezj45ZrHIGKn0Gg-DhAou.YiHYRSS9JazujWP6UXIBOZ-5",
                Gateway::SANDBOX_WS_URL);
    }

    /**
     * @todo Implement testSetExpressCheckout().
     */
    public function testSetExpressCheckout()
    {
        $item = new Item;
        $item->setName('Test Physical Product')
             ->setAmount(10)
             ->setTax(1)
             ->setDescription('Physical Product')
             ->setQuantity(2)
             ->setCategory(Item::PHYSICAL);
        
        $digital = new Item;
        $digital->setName('Test Digital Product')
                ->setAmount(5)
                ->setDescription('Digital Product')
                ->setQuantity(3)
                ->setCategory(Item::DIGITAL);
        
        $request = new Request\SetExpressCheckoutRequest(
                'http://example.com/return',
                'http://example.com/cancel');
        $request->addItem($item)
                ->addItem($digital);
        $response = $this->gateway->setExpressCheckout($request);
        
        $this->assertFalse($response->isError());
        $this->assertNotEmpty($response->getToken());
        
        var_dump($response);
    }
    
    public function testDigitalItemSetExpressCheckout() {
        $request = new Request\SetExpressCheckoutRequest(
                'http://example.com/return',
                'http://example.com/cancel');
        $request->setShowShipping(1);
        
        $item = new Item();
        $item->setAmount(10)
             ->setTax(0)
             ->setName('Something (with brackets)')
             ->setDescription('This is a digital product')
             ->setQuantity(1)
             ->setCategory('Digital');
        $request->addItem($item);
        
        $response = $this->gateway->setExpressCheckout($request);
        
        $this->assertFalse($response->isError());
        $this->assertNotEmpty($response->getToken());
    }

    /**
     * @todo Implement testDoExpressCheckoutPayment().
     */
    public function testDoExpressCheckoutPayment()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
